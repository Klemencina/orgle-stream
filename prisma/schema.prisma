generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Concert {
  id              String               @id @default(cuid())
  date            DateTime
  isVisible       Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  stripePriceId   String?              @db.VarChar(255)
  stripeProductId String?              @db.VarChar(255)
  translations    ConcertTranslation[]
  program         ProgramPiece[]
  tickets         Ticket[]

  @@map("concerts")
}

model ConcertTranslation {
  id          String  @id @default(cuid())
  locale      String
  title       String
  venue       String
  description String
  concertId   String
  performers  Json?
  subtitle    String?
  concert     Concert @relation(fields: [concertId], references: [id], onDelete: Cascade)

  @@unique([concertId, locale])
  @@map("concert_translations")
}

model ProgramPiece {
  id           String                    @id @default(cuid())
  order        Int
  concertId    String
  translations ProgramPieceTranslation[]
  concert      Concert                   @relation(fields: [concertId], references: [id], onDelete: Cascade)

  @@map("program_pieces")
}

model ProgramPieceTranslation {
  id             String       @id @default(cuid())
  locale         String
  title          String
  composer       String
  subtitles      String[]
  programPieceId String
  programPiece   ProgramPiece @relation(fields: [programPieceId], references: [id], onDelete: Cascade)

  @@unique([programPieceId, locale])
  @@map("program_piece_translations")
}

/// Records a successful purchase of a concert by a user
model Ticket {
  id                      String   @id @default(cuid())
  userId                  String
  concertId               String
  amountCents             Int
  currency                String   @default("eur")
  status                  String
  stripePaymentIntentId   String?  @db.VarChar(255)
  stripeCheckoutSessionId String?  @db.VarChar(255)
  createdAt               DateTime @default(now())
  concert                 Concert  @relation(fields: [concertId], references: [id], onDelete: Cascade)

  @@unique([userId, concertId])
  @@map("tickets")
}

/// User-reported support issues related to concerts/payments/access
model SupportReport {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  resolvedAt DateTime?
  status     String    @default("open")
  email      String
  type       String
  message    String?
  concertId  String
  userId     String?
  locale     String?
  isLive     Boolean?
  everLive   Boolean?
  windowOpen Boolean?
  purchased  Boolean?
  userAgent  String?

  @@map("support_reports")
}
